c
exit
Quotation.all
exit
c
var local
c
var local
c
market_symbol_precision
currency_pair
c
currency_pair
c
currency_pair
currency_pair_id
c
currency_pair_id
c
market_id
currency_pair_id
MarketSymbolPrecision.all
c
MarketSymbolPrecision.all
c
var local
MarketSymbolPrecision.all
c
MarketSymbolPrecision.all
market_symbol_precision
c
market_symbol_precision
c
market_symbol_precision
exit
var local
market_symbol_precision
exit
c
cexit
c
(value.to_s.sub(/\./, "") + add_zero).to_i
add_zero
value
c
exit
value.modulo(1)
value
Integer('000333', 10)
03333.to_i
0003333.to_i
0004.to_i
004.to_i
0003333.to_i
03423423499.to_i
001.to_i
value.to_s.sub(/\.0+\z/, "")
    fractional_part = value.to_s.sub(/\.0+\z/, "")
number_with_precision(value) * precision
value.to_r * precision
(Rational(value, precision) * Rational(precision))
Rational(value, precision).to_i
BigDecimal(value, Math.log10(precision)+1).precs()
(Rational(value, precision) * Rational(precision)).to_i
Rational(value, precision) * Rational(precision)
Rational(value, precision)
(Rational(value, precision) * precision).to_i
Rational(value, precision) * precision
(value.to_r * precision).to_i
(value.to_r * precision.to_r).to_i
value.to_r * precision.to_r
value.to_r * precision
(BigDecimal(value, Math.log10(precision)+1) * precision).to_f
(BigDecimal(value, Math.log10(precision)+1) * precision).to_s
(BigDecimal(value, Math.log10(precision)+1) * precision).to_i
BigDecimal(value, Math.log10(precision)+1) * precision
(value * precision).to_i
value * precision
BigDecimal(value, Math.log10(precision)+1)
precision
value
c
value
precision
c
request_quotations
exit
market_id
not(market_period.nil?)
not(market_currency_pair.nil?)
var local
not(market_currency_pair.nil?) && not(market_period.nil?)
c
select_datetimes
c
exit
count_time_interval
exit
9.1.to_i
9.99.to_i
count_time_interval
c
market_currency_pair.nil? && market_period.nil?
market_period
market_currency_pair
